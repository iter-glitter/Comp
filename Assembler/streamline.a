LOAD # 1 // load 1 into ACC
ADD # 2
STOR $ 5 // 3 stored in mem[5]
LDA $ 5 // Load 3 into reg a
MUL $ 5 // ACC = ACC*3 = 9
SHFT < 2 // shift ACC to the left by inserting two zeros | result = 36
div $ 5 // ACC/3 = 12
sub # 8 // ACC - 8 = 4 
STOR $ 1 // 4 stores in mem[1]
load $ 5 // load value of 3 back to ACC
MUL $ 1 // ACC = ACC*mem[1] = ACC*4 = 12
STOR $ 2 // 12 stored in mem[2]
SUB # 7 // ACC = ACC - 7 = 5
SHFT < 2 // shift ACC to the left by inserting two zeros | result = 20
STOR ($) 5 // store 20 into mem[mem[5]] ~ mem[3]
SHFT >> 2 // shift ACC to right by inserting two ones | result = 197
AND # 11 // ACC = ACC & 11 = 1
add # 18 // ACC = 19
div $ 5  // ACC = ACC/3 = 6
stor $ 4 // 6 stored into mem[4]
NOP
NOP
NOP
NOP
add # 98 // ACC + 98 = 104
or # 4 // ACC = ACC | 4 = 108
STOR ($) 2 // 108 stored at mem[mem[2]] ~ mem[12]
LDB ($) 2 // load value at mem[mem[2]] into reg B ~ 108 into B