memory[0] = 16'b1000101000000011; // LDA # 3 	// A = 3
memory[1] = 16'b1001000000000101; // STA $ 5 	// mem[5] = 3
memory[2] = 16'b0101001000000011; // LOAD # 3 	// ACC = 3
memory[3] = 16'b0111000000000001; // LMSK 1
memory[4] = 16'b0000100000000101; // SUB $ 5		// ACC - 3 = 0
memory[5] = 16'b0111100000000000; // NOP
memory[6] = 16'b0111100000000000; // NOP
memory[7] = 16'b0000001000000010; // ADD # 2		// ACC + 2 = 2
memory[8] = 16'b0000000000000101; // ADD $ 5		// ACC + 3 = 5
memory[9] = 16'b0101100000000001; // STOR $ 1 	// mem[1] = 5
memory[10] = 16'b0101001000000010; // LOAD # 2 	// ACC = 2
memory[11] = 16'b0101100000000011; // STOR $ 3 	// mem[3] = 2 @ 3270ns
memory[12] = 16'b0111100000000000; // NOP
memory[13] = 16'b0111100000000000; // NOP
memory[14] = 16'b0111100000000000; // NOP
memory[15] = 16'b0101001011001000; // LOAD # 200 //Test Overflow detection
memory[16] = 16'b0101100000000011; // STOR $ 3
memory[17] = 16'b0111000000000010; // LMSK 2
memory[18] = 16'b0101001010011110; // LOAD # 158
memory[19] = 16'b0000000000000011; // ADD $ 3 //Overflow
memory[20] = 16'b0000000000000011; // ADD $ 3 //Overflow
memory[21] = 16'b0111100000000000; // NOP
memory[22] = 16'b0111100000000000; // NOP
memory[23] = 16'b0101001000000100; // LOAD # 4
memory[24] = 16'b0101100000001010; // STOR $ 10 // Test INput OUtput
memory[25] = 16'b0111000000001000; // LMSK 8
memory[26] = 16'b0101001000000101; // LOAD # 5
memory[27] = 16'b0101001000000100; // LOAD # 4
memory[28] = 16'b0101001000000011; // LOAD # 3
memory[29] = 16'b0101001000000010; // LOAD # 2
memory[30] = 16'b0101001000000001; // LOAD # 1
memory[31] = 16'b0101001000000000; // LOAD # 0
memory[32] = 16'b0000001000000001; // ADD # 1
memory[33] = 16'b0000001000000001; // ADD # 1
memory[34] = 16'b0000001000000001; // ADD # 1
memory[35] = 16'b0111000000000100; // LMSK 4
memory[36] = 16'b0111100000000000; // NOP
memory[37] = 16'b1111100000000000; // NOP
memory[38] = 16'b0000001000000001; // ADD # 1
memory[39] = 16'b0000001000000001; // ADD # 1